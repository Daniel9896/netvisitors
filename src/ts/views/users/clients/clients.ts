//
//  Clients.ts
//
//  Generated by Poll Castillo on 15/02/2023
//
import { deleteEntity, getEntitiesData, getEntityData, registerEntity } from "../../../endpoints.js"
import { NUsers } from "../../../namespaces.js"
import { drawTagsIntoTables, inputObserver, inputSelect, CloseDialog } from "../../../tools.js"
import { InterfaceElement } from "../../../types.js"

const tableRows = 16
const currentPage = 1
const userType = "CUSTOMER"
const SUser = false

const tableLayout = `
  <div class="datatable" id="datatable">
    <div class="datatable_header">
      <div class="datatable_title" id="datatable-title"><h1>Clientes</h1></div>
      <div class="datatable_tools" id="datatable-tools">
        <input type="search"
        class="search_input"
        placeholder="Buscar"
        id="search">

        <button
          class="datatable_button add_user"
          id="new-entity">
          <span data-feather="user-plus"></span>
        </button>

        <button
          class="datatable_button import_user"
          id="import-entities">
          Importar
        </button>
      </div>
    </div>

    <table class="datatable_content">
      <thead><tr>
        <th><span data-type="name">
          Nombre <i data-feather="filter"></i>
        </span></th>

        <th colspan="2"><span data-type="id">
          ID <i data-feather="filter"></i>
        </span></th>

        <!-- th class="header_filled header_key"></!-->

        <th class="thead_centered"><span data-type="status">
          Estado <i data-feather="filter"></i>
        </span></th>

        <th><span data-type="citadel">
          Ciudadela <i data-feather="filter"></i>
        </span></th>

        <th class="header_filled"></th>

      </tr></thead>
      <tbody id="datatable-body" class="datatable_body">

      </tbody>
    </table>

    <div class="datatable_footer">
      <div class="datatable_pagination" id="pagination-container"></div>
    </div>
  </div>`

const tableLayoutTemplate = `
    <tr>
        <td>Cargando</td>
        <td>Cargando</td>
        <td>Cargando</td>
        <td>Cargando</td>
        <td class="entity_options">
            <button class="button" id="edit-data">
                <i data-feather="edit-2" class="table_icon"></i>
            </button>
            <button class="button" id="remove-entity">
                <i data-feather="trash" class="table_icon"></i>
            </button>
            <button class="button" id="convert-toSuperuser">
                <i data-feather="shield" class="table_icon"></i>
            </button>
        </td>
    </tr>`

const getUsers = async (userType: string, superUser: boolean): Promise<void> => {
    const users: any = await getEntitiesData('User')
    const FSuper: any = users.filter((data: any) => data.isSuper === superUser)
    const data: any = FSuper.filter((data: any) => `${data.userType}`.includes(userType))
    return data
}

export class Clients implements NUsers.IUser {
    private dialogContainer: InterfaceElement =
        document.getElementById('app-dialogs')

    private entityDialogContainer: InterfaceElement =
        document.getElementById('entity-editor-container')

    private content: InterfaceElement =
        document.getElementById('datatable-container')

    public async render(): Promise<void> {
        let data = await getUsers(userType, SUser)
        this.content.innerHTML = ''
        this.content.innerHTML = tableLayout
        const tableBody: InterfaceElement = document.getElementById('datatable-body')

        tableBody.innerHTML = tableLayoutTemplate.repeat(tableRows)
        this.load(tableBody, currentPage, data)
        // @ts-ignore
        feather.replace()
        this.searchEntity(tableBody)
    }

    public load(table: InterfaceElement, currentPage: number, data: any) {
        table.innerHTML = ''
        currentPage--
        let start: number = tableRows * currentPage
        let end: number = start + tableRows
        let paginatedItems: any = data.slice(start, end)
        if (data.length === 0) {
            let row: InterfaceElement = document.createElement('tr')
            row.innerHTML = `
        <td>los datos no coinciden con su búsqueda</td>
        <td></td>
        <td></td>
      `
            table.appendChild(row)
        }
        else {
            for (let i = 0; i < paginatedItems.length; i++) {
                let client = paginatedItems[i]
                let row: InterfaceElement =
                    document.createElement('tr')
                row.innerHTML += `
          <td>${client.firstName} ${client.lastName}</dt>
          <td>${client.username}</dt>
          <td class="key"><button class="button"><i data-feather="key" class="table_icon"></i></button></td>
          <td class="tag"><span>${client.state.name}</span></dt>
          <td>${client.citadel.description}</dt>
          <td class="entity_options">
            <button class="button" id="edit-entity" data-entityId="${client.id}">
              <i data-feather="edit-2" class="table_icon"></i>
            </button>

            <button class="button" id="remove-entity" data-entityId="${client.id}">
              <i data-feather="trash" class="table_icon"></i>
            </button>

            <button class="button" id="convert-entity" data-entityId="${client.id}">
              <i data-feather="shield" class="table_icon"></i>
            </button>
          </dt>
        `
                table.appendChild(row)
                drawTagsIntoTables()
            }
        }

        const tableBody = {}

        this.register(this.entityDialogContainer, data)
        this.import()
        this.edit(this.entityDialogContainer, data)
        this.remove()
        this.convertToSuper()
    }

    public searchEntity = async (tableBody: InterfaceElement) => {
        const search: InterfaceElement = document.getElementById('search')
        await search.addEventListener('keyup', async (): Promise<void> => {
            let data: any = await getUsers(userType, SUser)
            console.log(data)
            const arrayData: any = data.filter((user: any) => {
                `${user.firstName}
         ${user.lastName}
         ${user.username}`
                    .toLowerCase()
                    .includes(search.value.toLowerCase())
            })

            let filteredResult = arrayData.length
            if (filteredResult >= tableRows) filteredResult = tableRows
            console.log(filteredResult)
            this.load(tableBody, currentPage, filteredResult)
        })
    }

    public register(container: InterfaceElement, data: any) {
        // register entity
        const openEditor: InterfaceElement = document.getElementById('new-entity')
        openEditor.addEventListener('click', (): void => {
            renderInterface('User')
        })

        const renderInterface = async (entities: string): Promise<void> => {
            this.entityDialogContainer.innerHTML = ''
            this.entityDialogContainer.style.display = 'block'
            this.entityDialogContainer.innerHTML = `
        <div class="entity_editor" id="entity-editor">
          <div class="entity_editor_header">
            <div class="user_info">
              <div class="avatar"><i data-feather="user"></i></div>
              <h1 class="entity_editor_title">Registrar <br><small>Cliente</small></h1>
            </div>

            <button class="btn btn_close_editor" id="close"><i data-feather="x"></i></button>
          </div>

          <!-- EDITOR BODY -->
          <div class="entity_editor_body">
            <div class="material_input">
              <input type="text" id="entity-firstname" autocomplete="none">
              <label for="entity-firstname">Nombre</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-lastname" autocomplete="none">
              <label for="entity-lastname">Apellido</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-secondlastname" autocomplete="none">
              <label for="entity-secondlastname">2do Apellido</label>
            </div>

            <div class="material_input">
              <input type="text"
                id="entity-phone"
                maxlength="10" autocomplete="none">
              <label for="entity-phone">Teléfono</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-username" class="input_filled" placeholder="john.doe@ejemplo.com" readonly>
              <label for="entity-username"><i data-feather="lock" class="input_locked"></i> Nombre de usuario</label>
            </div>

            <div class="material_input_select">
              <label for="entity-state">Estado</label>
              <input type="text" id="entity-state" class="input_select" readonly placeholder="cargando..." autocomplete="none">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-business">Empresa</label>
              <input type="text" id="entity-business" class="input_select" readonly placeholder="cargando..." autocomplete="none">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-citadel">Ciudadela</label>
              <input type="text" id="entity-citadel" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-customer">Cliente</label>
              <input type="text" id="entity-customer" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-department">Departamento</label>
              <input type="text" id="entity-department" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <br><br>
            <div class="material_input">
              <input type="password" id="tempPass" autocomplete="false">
              <label for="tempPass">Contraseña temporal</label>
            </div>

          </div>
          <!-- END EDITOR BODY -->

          <div class="entity_editor_footer">
            <button class="btn btn_primary btn_widder" id="register-entity">Guardar</button>
          </div>
        </div>
      `

            // @ts-ignore
            feather.replace()
            inputObserver()
            inputSelect('Citadel', 'entity-citadel')
            inputSelect('Customer', 'entity-customer')
            inputSelect('State', 'entity-state')
            inputSelect('Department', 'entity-department')
            inputSelect('Business', 'entity-business')
            this.close()
            this.generateUserName()


            const registerButton: InterfaceElement = document.getElementById('register-entity')
            registerButton.addEventListener('click', (): void => {
                const inputsCollection: any = {
                    firstName: document.getElementById('entity-firstname'),
                    lastName: document.getElementById('entity-lastname'),
                    secondLastName: document.getElementById('entity-secondlastname'),
                    phoneNumer: document.getElementById('entity-phone'),
                    state: document.getElementById('entity-state'),
                    customer: document.getElementById('entity-customer'),
                    username: document.getElementById('entity-username'),
                    citadel: document.getElementById('entity-citadel'),
                    temporalPass: document.getElementById('tempPass')
                }

                console.log(inputsCollection)

                const raw = JSON.stringify({
                    "lastName": `${inputsCollection.lastName.value}`,
                    "secondLastName": `${inputsCollection.secondLastName.value}`,
                    "isSuper": false,
                    "email": "",
                    "temp": `${inputsCollection.temporalPass.value}`,
                    "isWebUser": false,
                    "active": true,
                    "firstName": `${inputsCollection.firstName.value}`,
                    "state": {
                        "id": `${inputsCollection.state.dataset.entityid}`
                    },
                    "contractor": {
                        "id": "06b476c4-d151-d7dc-cf0e-2a1e19295a00",
                    },
                    "customer": {
                        "id": `${inputsCollection.customer.dataset.optionid}`
                    },
                    "citadel": {
                        "id": `${inputsCollection.citadel.dataset.entityid}`
                    },
                    "phone": `${inputsCollection.phoneNumer.value}`,
                    "userType": "CUSTOMER",
                    "username": `${inputsCollection.username.value}@${inputsCollection.customer.value}.com`
                })
                reg(raw)

            })

        }

        const reg = async (raw: any) => {
            console.log(raw)
            registerEntity(raw)
                .then(res => {
                    const tableBody: InterfaceElement = document.getElementById('datatable-body')
                    this.load(tableBody, currentPage, data)

                    console.log('done')
                })
        }
    }

    private generateUserName = async (): Promise<void> => {
        const firstName: InterfaceElement = document.getElementById('entity-firstname')
        const secondName: InterfaceElement = document.getElementById('')
        const lastName: InterfaceElement = document.getElementById('entity-lastname')
        const secondLastName: InterfaceElement = document.getElementById('entity-secondlastname')
        const clientName: InterfaceElement = document.getElementById('entity-customer')

        const userName: InterfaceElement = document.getElementById('entity-username')

        let UserNameFFragment: string = ''
        let UserNameLNFragment: string = ''
        let UserNameSLNFragment: string = ''


        firstName.addEventListener('keyup', (e: any): void => {
            UserNameFFragment = firstName.value.toLowerCase()
            userName.setAttribute('value', `${UserNameFFragment.trim()}.${UserNameLNFragment}${UserNameSLNFragment}`)
        })

        lastName.addEventListener('keyup', (e: any): void => {
            UserNameLNFragment = lastName.value.toLowerCase()
            userName.setAttribute('value', `${UserNameFFragment.trim()}.${UserNameLNFragment}${UserNameSLNFragment}`)
        })

        secondLastName.addEventListener('keyup', (e: any): void => {
            UserNameSLNFragment = secondLastName.value.toLowerCase()
            if (secondLastName.value.length > 0) {
                UserNameFFragment[0]
                userName.setAttribute('value', `${UserNameFFragment}.${UserNameLNFragment}${UserNameSLNFragment[0]}`)
            }
            else {
                userName.setAttribute('value', `${UserNameFFragment}.${UserNameLNFragment}${UserNameSLNFragment}`)
            }
        })

    }

    public import() {
        const importButton: InterfaceElement =
            document.getElementById('import-entities')
        importButton.addEventListener('click', (): void => {
            alert('Importing...')
        })
    }

    public edit(container: InterfaceElement, data: any) {
        // Edit entity
        const edit: InterfaceElement = document.querySelectorAll('#edit-entity')
        edit.forEach((edit: InterfaceElement) => {
            const entityId = edit.dataset.entityid
            edit.addEventListener('click', (): void => {
                RInterface('User', entityId)
            })
        })

        const RInterface = async (entities: string, entityID: string): Promise<void> => {
            const data: any = await getEntityData(entities, entityID)
            this.entityDialogContainer.innerHTML = ''
            this.entityDialogContainer.style.display = 'block'
            this.entityDialogContainer.innerHTML = `
        <div class="entity_editor" id="entity-editor">
          <div class="entity_editor_header">
            <div class="user_info">
              <div class="avatar"><i data-feather="user"></i></div>
              <h1 class="entity_editor_title">Editar <br><small>${data.firstName} ${data.lastName}</small></h1>
            </div>

            <button class="btn btn_close_editor" id="close"><i data-feather="x"></i></button>
          </div>

          <!-- EDITOR BODY -->
          <div class="entity_editor_body">
            <div class="material_input">
              <input type="text" id="entity-firstname" class="input_filled" value="${data.firstName}">
              <label for="entity-firstname">Nombre</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-lastname" class="input_filled" value="${data.lastName}">
              <label for="entity-lastname">Apellido</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-secondlastname" class="input_filled" value="${data.secondLastName}">
              <label for="entity-secondlastname">2do Apellido</label>
            </div>

            <div class="material_input">
              <input type="text"
                id="entity-phone"
                class="input_filled"
                maxlength="10"
                value="${data.phone}">
              <label for="entity-phone">Teléfono</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-username" class="input_filled" value="${data.username}" readonly>
              <label for="entity-username">Nombre de usuario</label>
            </div>

            <div class="material_input_select">
              <label for="entity-state">Estado</label>
              <input type="text" id="entity-state" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-business">Empresa</label>
              <input type="text" id="entity-business" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-citadel">Ciudadela</label>
              <input type="text" id="entity-citadel" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-customer">Cliente</label>
              <input type="text" id="entity-customer" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <div class="material_input_select">
              <label for="entity-department">Departamento</label>
              <input type="text" id="entity-department" class="input_select" readonly placeholder="cargando...">
              <div id="input-options" class="input_options">
              </div>
            </div>

            <br><br><br>
            <div class="material_input">
              <input type="password" id="tempPass" >
              <label for="tempPass">Clave temporal</label>
            </div>

          </div>
          <!-- END EDITOR BODY -->

          <div class="entity_editor_footer">
            <button class="btn btn_primary btn_widder" id="update-changes">Guardar</button>
          </div>
        </div>
      `

            // @ts-ignore
            feather.replace()
            inputObserver()
            inputSelect('Business', 'entity-citadel')
            inputSelect('Customer', 'entity-customer')
            inputSelect('State', 'entity-state', data.state.name)
            inputSelect('Department', 'entity-department')
            inputSelect('Business', 'entity-business')
            this.close()
            UUpdate(entityID)
        }

        const UUpdate = async (entityId: any): Promise<void> => {
            const updateButton: InterfaceElement =
                document.getElementById('update-changes')

            updateButton.addEventListener('click', () => {
                console.log('updating')
            })
        }
    }

    public remove() {
        const remove: InterfaceElement = document.querySelectorAll('#remove-entity')
        remove.forEach((remove: InterfaceElement) => {

            const entityId = remove.dataset.entityid

            remove.addEventListener('click', (): void => {
                this.dialogContainer.style.display = 'block'
                this.dialogContainer.innerHTML = `
          <div class="dialog_content" id="dialog-content">
            <div class="dialog dialog_danger">
              <div class="dialog_container">
                <div class="dialog_header">
                  <h2>¿Deseas eliminar este cliente?</h2>
                </div>

                <div class="dialog_message">
                  <p>Esta acción no se puede revertir</p>
                </div>

                <div class="dialog_footer">
                  <button class="btn btn_primary" id="cancel">Cancelar</button>
                  <button class="btn btn_danger" id="delete">Eliminar</button>
                </div>
              </div>
            </div>
          </div>
        `

                // delete button
                // cancel button
                // dialog content
                const deleteButton: InterfaceElement = document.getElementById('delete')
                const cancelButton: InterfaceElement = document.getElementById('cancel')
                const dialogContent: InterfaceElement = document.getElementById('dialog-content')

                deleteButton.onclick = () => {
                    deleteEntity('User', entityId)
                    new CloseDialog().x(dialogContent, this.dialogContainer)
                    this.render()
                }

                cancelButton.onclick = () => {
                    new CloseDialog().x(dialogContent, this.dialogContainer)
                    this.render()
                }
            })
        })

    }

    public convertToSuper() {
        const convert: InterfaceElement = document.querySelectorAll('#convert-entity')
        convert.forEach((convert: InterfaceElement) => {
            const entityId = convert.dataset.entityid
            convert.addEventListener('click', (): void => {
                alert('Converting...')
            })
        })
    }

    public close(): void {
        const closeButton: InterfaceElement =
            document.getElementById('close')

        const editor: InterfaceElement =
            document.getElementById('entity-editor')

        closeButton.addEventListener('click', (): void => {
            new CloseDialog().x(editor, this.entityDialogContainer)
        })
    }
}
