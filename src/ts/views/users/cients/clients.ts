//
//  Clients.ts
//
//  Generated by Poll Castillo on 15/02/2023
//
import { getEntitiesData, getEntityData } from "../../../endpoints.js"
import { NUsers } from "../../../namespaces.js"
import { drawTagsIntoTables, inputObserver } from "../../../tools.js"
import { InterfaceElement } from "../../../types.js"

const tableRows = 16
const currentPage = 1
const userType = "CUSTOMER"
const SUser = false

const tableLayout = `
  <div id="datatable" class="datatable">
    <div class="datatable_header">
      <div class="datatable_title" id="datatable-title"><h1>Clientes</h1></div>
      <div class="datatable_tools" id="datatable-tools">
        <input type="search"
        class="search_input"
        placeholder="Buscar"
        id="search">

        <button
            class="datatable_button add_user"
            id="new-entity">
            <span data-feather="user-plus"></span>
        </button>

        <button
            class="datatable_button import_user"
            id="import-entities">
            importar
        </button>
      </div>
    </div>

        <table class="datatable_content">
            <thead>
                <tr>
                    <th data-type="name"><span>Nombre <i data-feather="filter"></i></span></th>
                    <th data-type="id"><span>ID <i data-feather="filter"></i></span></th>
                    <th data-type="status">Estado <i data-feather="filter"></i></th>
                    <th data-type="citadel">Ciudadela <i data-feather="filter"></i></th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="datatable-body" class="datatable_body">
            </tbody>
        </table>

        <div class="datatable_footer">
            <div class="datatable_pagination" id="pagination-container"></div>
        </div>
    </div>`

const tableLayoutTemplate = `
    <tr>
        <td>Cargando</td>
        <td>Cargando</td>
        <td>Cargando</td>
        <td>Cargando</td>
        <td class="entity_options">
            <button class="button" id="edit-data">
                <i data-feather="edit-2" class="table_icon"></i>
            </button>
            <button class="button" id="remove-entity">
                <i data-feather="trash" class="table_icon"></i>
            </button>
            <button class="button" id="convert-toSuperuser">
                <i data-feather="shield" class="table_icon"></i>
            </button>
        </td>
    </tr>`

const getUsers = async (userType: string, superUser: boolean): Promise<void> => {
  const users: any = await getEntitiesData('User')
  const FSuper: any = users.filter((data: any) => data.isSuper === superUser)
  const data: any = FSuper.filter((data: any) => `${data.userType}`.includes(userType))
  return data
}

export class Clients implements NUsers.IUser {
  private dialogContainer: InterfaceElement =
    document.getElementById('app-dialogs')

  private entityDialogContainer: InterfaceElement =
    document.getElementById('entity-editor-container')

  private content: InterfaceElement =
    document.getElementById('datatable-container')

  public async render(): Promise<void> {
    let data = await getUsers(userType, SUser)
    console.log(data)
    this.content.innerHTML = ''
    this.content.innerHTML = tableLayout

    const tableBody: InterfaceElement =
      document.getElementById('datatable-body')

    tableBody.innerHTML = tableLayoutTemplate.repeat(tableRows)
    this.load(tableBody, currentPage, data)
    // @ts-ignore
    feather.replace()
  }

  public load(table: InterfaceElement, currentPage: number, data: any) {
    table.innerHTML = ''
    currentPage--
    let start: number = tableRows * currentPage
    let end: number = start + tableRows
    let paginatedItems: any = data.slice(start, end)
    if (data.length === 0) {
      let row: InterfaceElement = document.createElement('tr')
      row.innerHTML = `
        <td>los datos no coinciden con su búsqueda</td>
        <td></td>
        <td></td>
      `
      table.appendChild(row)
    }
    else {
      for (let i = 0; i < paginatedItems.length; i++) {
        let client = paginatedItems[i]
        let row: InterfaceElement =
          document.createElement('tr')
        row.innerHTML += `
          <td>${client.firstName} ${client.lastName}</dt>
          <td>${client.username}</dt>
          <td class="tag"><span>${client.state.name}</span></dt>
          <td>${client.citadel.description}</dt>
          <td class="entity_options">
            <button class="button" id="edit-entity" data-entityId="${client.id}">
              <i data-feather="edit-2" class="table_icon"></i>
            </button>

            <button class="button" id="remove-entity" data-entityId="${client.id}">
              <i data-feather="trash" class="table_icon"></i>
            </button>

            <button class="button" id="convert-entity" data-entityId="${client.id}">
              <i data-feather="shield" class="table_icon"></i>
            </button>
          </dt>
        `
        table.appendChild(row)
        drawTagsIntoTables()
      }
    }

    const tableBody = {}

    this.register(this.entityDialogContainer, data)
    this.import()
    this.edit(this.entityDialogContainer, data)
    this.remove()
    this.convertToSuper()
  }

  public register(container: InterfaceElement, data: any) {
    const registerButton: InterfaceElement =
      document.getElementById('new-entity')
    registerButton.addEventListener('click', (): void => {
      RInterface(container, data)
    })

    const RInterface = async (container: InterfaceElement, data: any): Promise<void> => {
      console.log(container)
      console.log(data)
    }
  }

  public import() {
    const importButton: InterfaceElement =
      document.getElementById('import-entities')
    importButton.addEventListener('click', (): void => {
      alert('Importing...')
    })
  }

  public edit(container: InterfaceElement, data: any) {
    // Edit entity
    const edit: InterfaceElement = document.querySelectorAll('#edit-entity')
    edit.forEach((edit: InterfaceElement) => {
      const entityId = edit.dataset.entityid
      edit.addEventListener('click', (): void => {
        RInterface('User', entityId)
      })
    })

    const RInterface = async (entities: string, entityID: string): Promise<void> => {
      const data: any = await getEntityData(entities, entityID)
      console.log(data)
      this.entityDialogContainer.innerHTML = ''
      this.entityDialogContainer.style.display = 'block'
      this.entityDialogContainer.innerHTML = `
        <div class="entity_editor" id="entity-editor">
          <div class="entity_editor_header">
            <div class="user_info">
              <div class="avatar"><i data-feather="user"></i></div>
              <h1 class="entity_editor_title">Editar <br><small>${data.firstName} ${data.lastName}</small></h1>
            </div>

            <button class="btn btn_close_editor" id="close"><i data-feather="x"></i></button>
          </div>

          <!-- EDITOR BODY -->
          <div class="entity_editor_body">
            <div class="material_input">
              <input type="text" id="entity-firstname" class="input_filled" value="${data.firstName}">
              <label for="entity-firstname">Nombre</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-lastname" class="input_filled" value="${data.lastName}">
              <label for="entity-lastname">Apellido</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-secondlastname" class="input_filled" value="${data.secondLastName}">
              <label for="entity-secondlastname">2do Apellido</label>
            </div>

            <div class="material_input">
              <input type="text"
                id="entity-phone"
                class="input_filled"
                maxlength="10"
                value="${data.phone}">
              <label for="entity-phone">Teléfono</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-username" class="input_filled" value="${data.username}" readonly>
              <label for="entity-username">Nombre de usuario</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-state" class="input_filled" value="${data.state.name}">
              <label for="entity-state">Estado</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-busisness" class="input_filled" value="${data.business.name}">
              <label for="entity-business">Empresa</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-busisness" class="input_filled" value="${data.citadel.name}">
              <label for="entity-business">Ciudadela</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-busisness" class="input_filled" value="${data.customer.name}">
              <label for="entity-business">Cliente</label>
            </div>

            <div class="material_input">
              <input type="text" id="entity-busisness" class="input_filled" value="${data.department.name}">
              <label for="entity-business">Departamento</label>
            </div>

            <br><br><br>
            <div class="material_input">
              <input type="password" id="tempPass" value="">
              <label for="tempPass">Clave temporal</label>
            </div>

          </div>
          <!-- END EDITOR BODY -->

          <div class="entity_editor_footer">
            <button class="btn btn_primary btn_widder" id="update-changes">Guardar</button>
          </div>
        </div>
      `

      // @ts-ignore
      feather.replace()
      inputObserver()
      this.close()
      UUpdate(entityID)
    }

    const UUpdate = async (entityId: any): Promise<void> => {
      const updateButton: InterfaceElement =
        document.getElementById('update-changes')

      updateButton.addEventListener('click', () => {
        console.log('updating')
      })
    }
  }

  public remove() {
    const remove: InterfaceElement = document.querySelectorAll('#remove-entity')
    remove.forEach((remove: InterfaceElement) => {
      const entityId = remove.dataset.entityid
      remove.addEventListener('click', (): void => {
        alert('Removing...')
      })
    })
  }

  public convertToSuper() {
    const convert: InterfaceElement = document.querySelectorAll('#convert-entity')
    convert.forEach((convert: InterfaceElement) => {
      const entityId = convert.dataset.entityid
      convert.addEventListener('click', (): void => {
        alert('Converting...')
      })
    })
  }

  public close(): void {
    const closeButton: InterfaceElement =
      document.getElementById('close')

    const editor: InterfaceElement =
      document.getElementById('entity-editor')

    closeButton.addEventListener('click', (): void => {
      new Close().x(editor, this.entityDialogContainer)
    })
  }
}

class Close {
  public x(editor: any, container: any) {
    container.style.display = 'none'
    editor.remove()
  }
}