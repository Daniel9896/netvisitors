//
//  endpoints.ts
//
//  Generated by Poll Castillo on 26/02/2023.
//
import { Endpoint, Request } from "./types.js"

const NetliinksUrl: string =
  'https://backend.netliinks.com:443/rest/entities/'

export let token = localStorage.getItem('access_token')
export const _userAgent = navigator.userAgent

let headers: Headers = new Headers()
headers.append('Authorization', `Bearer ${token}`)
headers.append('Content-Type', "application/json")
headers.append('Cookie', "JSESSIONID=CDD208A868EAABD1F523BB6F3C8946AF")

export const getToken = async (mail: string, password: string): Endpoint => {
  const URL: string =
    'https://backend.netliinks.com:443/oauth/token'

  const ReqOptions: {} = {
    method: 'POST',
    body: `grant_type=password&username=${mail}&password=${password}`,
    headers: {
      Accept: 'application/json',
      "User-agent": `${_userAgent}`,
      Authorization: 'Basic YzNjMDM1MzQ2MjoyZmM5ZjFiZTVkN2IwZDE4ZjI1YmU2NDJiM2FmMWU1Yg==',
      "Content-Type": 'application/x-www-form-urlencoded',
      Cookie: "JSESSIONID=CDD208A868EAABD1F523BB6F3C8946AF",
    }
  }
  const res: Response = await fetch(URL, ReqOptions)
  return res.json()
}

/**
 *
 * @returns user information, type, business,
 * customers, guards and more
 */

export const getUserInfo = async (): Endpoint => {
  const userInfo: Request = {
    url: 'https://backend.netliinks.com:443/rest/userInfo?fetchPlan=full',
    method: 'GET'
  }

  const options: {} = {
    method: userInfo.method,
    headers: headers,
    redirect: 'follow'
  }

  return fetch(userInfo.url, options)
    .then((req) => req.json())
    .catch((err: Error) => console.info(err))
}

/**
 *
 * @param url
 *
 * @returns a specific data from url
 */
// export async function getData(url: RequestInfo): Endpoint
export const getData = async (url: RequestInfo): Endpoint => {
  let ReqOptions: {} = {
    method: 'GET',
    headers: headers,
    redirect: 'follow'
  }
  const res: Response = await fetch(url, ReqOptions)
  return await res.json()
}

/**
 *
 * @param entities name of a specific entity to get.
 *
 * @returns all content of a specific
 * entity (all bussines data for example).
 */
export const getEntitiesData = async (entities: string): Endpoint => {
  const URL: string = `${NetliinksUrl}${entities}?orderby=createdDate&fetchPlan=full`
  return await getData(URL)
}

/**
 *
 * @param entities name of a specific entity to search.
 * @param entity name of a specific entity to get.
 *
 * @returns all data of specified entity.
 */
export const getEntityData = async (entities: string, entity: string): Endpoint => {
  const URL: string = `${NetliinksUrl}${entities}/${entity}?fetchPlan=full&orderby=createdDate`
  return getData(URL)
}

export const updateEntity = async (entities: string, entity: string, raw: any): Endpoint => {
  const URL: string = `${NetliinksUrl}${entities}/${entity}`
  const ReqOptions: any = {
    method: 'PUT',
    headers: headers,
    body: raw,
    redirect: 'follow'
  }
  await fetch(URL, ReqOptions)
    .then(res => res.json())
    .catch(err => console.error('Error: ', err))
}

export const deleteEntity = async (entities: string, entity: string): Endpoint => {
  const URL: string = `${NetliinksUrl}${entities}/${entity}?fetchPlan=full`
  const ReqOptions: any = {
    method: 'DELETE',
    headers: headers,
    redirect: 'follow'
  }
  await fetch(URL, ReqOptions)
    .then(res => res.json())
    .catch(err => console.error('Error: ', err))
}

export const registerEntity = async (raw: any): Endpoint => {
  const req: Request = {
    url: 'https://backend.netliinks.com:443/rest/entities/User',
    method: 'POST'
  }

  const requestOptions: {} = {
    method: req.method,
    headers: headers,
    body: raw,
    redirect: 'follow'
  };

  fetch(req.url, requestOptions)
    .then((req) => req.json())
    .then(req => (console.log(req)))
    .catch((err: Error) => console.info(err))
}


export const filterEntities = async (user: any): Endpoint => { }

export const setPassword = async (user: any): Endpoint => {
  const req: Request = {
    url: 'https://backend.netliinks.com:443/rest/services/UserServiceBean/updatePassword',
    method: 'POST'
  }

  const requestOptions: {} = {
    method: req.method,
    headers: headers,
    body: user,
    redirect: 'follow'
  };

}