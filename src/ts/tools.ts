//
//  lib.tools.ts
//
// Generated by Poll Castillo on 15/02/2023.
import { getEntitiesData } from "./endpoints.js"
import { InterfaceElement, InterfaceElementCollection } from "./types.js"

//
export const inputObserver = (): void => {
    const inputs = <NodeListOf<Element>>document.querySelectorAll('input')
    inputs.forEach((input: any) => {
        input.addEventListener("keyup", (e: any): void => {
            if (input.value == "" || input.value == " ")
                input.classList.remove('input_filled'),
                    input.value = ""
            else
                input.classList.add('input_filled')
        })
    })
}

export const inputSelect = async (entity: string, selectId: string, currentStatus?: string): Promise<void> => {
    const data = await getEntitiesData(entity)
    const state = await currentStatus
    const select: InterfaceElement = document.querySelector(`#${selectId}`)
    const inputParent = select.parentNode
    const optionsContent = inputParent.querySelector('#input-options')
    const optionsContainer: InterfaceElement = document.createElement('div')
    optionsContainer.classList.add('input_options_container')

    optionsContent.appendChild(optionsContainer)

    for (let i = 0; i < data.length; i++) {
        const inputOption: InterfaceElement = document.createElement('div')
        select.setAttribute('data-optionid', data[0].id)
        select.setAttribute('value', data[0].name)
        inputOption.classList.add('input_option')
        inputOption.setAttribute('id', data[i].id)
        inputOption.innerHTML = data[i].name

        optionsContainer.appendChild(inputOption)
    }
    const options: InterfaceElement = optionsContainer.querySelectorAll('.input_option')

    if (state === "Enabled") {
        select.value = "Activo"
    } else if (state === 'Disabled') {
        select.value = "Inactivo"
    } else {
        select.value = data[0].name
    }

    select.addEventListener('click', (): void => {
        inputParent.classList.toggle('select_active')
    })

    options.forEach((option: any) => {
        option.addEventListener('click', (): void => {
            select.value = option.innerText
            select.removeAttribute('data-optionid')
            select.setAttribute('data-optionid', option.getAttribute('id'))
            inputParent.classList.remove('select_active')
        })
    })
}

export class FixStatusElement {
    public fix(element: any): void {
        const elementTextValue = element.innerText
        if (elementTextValue === "Enabled")
            elementTextValue.innerText = 'Activo',
                elementTextValue.toUpperCase()
        else
            elementTextValue.toUpperCase()
    }
}

export class FixStatusInputElement {
    public fix(inputId: string): void {
        const inputs = <NodeListOf<Element>>document.querySelectorAll(`#${inputId}`)
        inputs.forEach((input: any): void => {
            if (input.value === 'Enabled')
                input.value = 'Activo'.toUpperCase()
            else if (input.value == 'Disabled')
                input.value = 'Inactivo'.toUpperCase()
        })
    }
}

export const drawTagsIntoTables = (): void => {
    const tags: HTMLElement | any = document.querySelectorAll('.tag span')
    tags.forEach((tag: any): void => {
        let text = tag.innerText
        if (text === "Enabled" ||
            text === "enabled" ||
            text === "ENABLED" ||
            text === "Activo" ||
            text === "ACTIVO") {
            tag.innerText = "Activo"
            tag.classList.add("tag_green")
        }
        else if (text === "Disabled" ||
            text === "disabled" ||
            text === "DISABLED" ||
            text === "Inactivo" ||
            text === "INACTIVO") {
            tag.innerText = "Inactivo"
            tag.classList.add("tag_gray")
        } else if (text === "Pendiente" ||
            text === "pendiente" ||
            text === "PENDIENTE") {
            tag.classList.add("tag_yellow")
        } else {
            tag.classList.add('tag_gray')
        }
    })
}

export class CloseDialog {
    public x(container?: any) {
        container.style.display = 'none'
        // const dialog: InterfaceElement = container.firstElementChild
        // dialog.remove()
    }
}

// SIDEBAR RENDERING TOOLS
export const renderRightSidebar = (UIFragment: InterfaceElement) => {
    const dialogContainer: InterfaceElement = document.getElementById('entity-editor-container')

    dialogContainer.innerHTML = ''
    dialogContainer.style.display = 'flex'
    dialogContainer.innerHTML = UIFragment
}

export const fixDate = () => {
    const arrayDates: InterfaceElementCollection = document.querySelectorAll('#table-date')
    arrayDates.forEach((date: InterfaceElement) => {
        const dateP1 = date.innerText.split('-')
        const dateP2 = dateP1[2].split('T')
        const dateP3 = dateP2[1].split(':')

        // TODO: Change months for month names
        // switch (dateP1[1]) {
        //   case 01 = console.log('sies')
        // }

        const YearDate = dateP1[0]
        const MonthDate = dateP1[1]
        const DayDate = dateP2[0]

        const Hours = dateP3[0]
        const Minutes = dateP3[1]
        const Seconds = dateP3[2]

        const DT = YearDate + ' ' + MonthDate + ' ' + DayDate
        const Time = Hours + ':' + Minutes + ':' + Seconds.slice(0, 2)

        date.innerText = DT + ' ' + Time
    })

}

export class filterDataByHeaderType {
    private readonly datatable: InterfaceElement = document.getElementById('datatable')

    public filter = (): void => {

        this.datatable.onclick = (e: any) => {
            if (e.target.tagName != "SPAN") return
            let span = e.target
            let th = e.target.parentNode

            const THead = this.datatable.querySelectorAll('tr th span')
            THead.forEach((header: InterfaceElement) => {
                header.classList.remove('datatable_header_selected')
            })

            e.target.classList.add('datatable_header_selected')
            this.sortGrid(th.cellIndex, span.dataset.type)
        }
    }

    private sortGrid = (colNum: number, type: string): void => {
        let tbody: any = this.datatable.querySelector('tbody')
        let rowsArray = Array.from(tbody.rows)
        let compare: any

        switch (type) {
            case 'name':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
            case 'id':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
            case 'status':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
            case 'citadel':
                compare = (rowA: any, rowB: any) => {
                    return rowA.cells[colNum].innerHTML >
                        rowB.cells[colNum].innerHTML ? 1 : -1
                }
                break
        }

        rowsArray.sort(compare)
        tbody.append(...rowsArray)
    }
}