//
//  Dashboar.ts
//
//  Generated by Poll Castillo on 23/02/2023.
//
import { getData, getEntitiesData } from "../../endpoints.js";
import { CloseDialog, inputObserver } from "../../tools.js";
import { renderDailyChart } from "./DashboardDailySection.js";
import { renderMonthlyChart } from "./DashboardMonthtlySection.js";
import { renderWeeklyChart } from "./DashboardWeeklySection.js";
import { renderYearlyChart } from "./DashboardYearlySection.js";
export class Dashboard {
    constructor() {
        this.interfaceContainer = document.getElementById('datatable-container');
        this.dashboardContainer = document.createElement('div');
    }
    render() {
        this.dashboardContainer.classList.add('dashboard_container');
        this.dashboardContainer.setAttribute('id', 'dashboard-container');
        this.interfaceContainer.innerHTML = "";
        this.interfaceContainer.appendChild(this.dashboardContainer);
        this.interface(this.dashboardContainer);
        // @ts-ignore
        feather.replace();
    }
    interface(container) {
        container.innerHTML = `
      <h1>Dashboard</h1>
      <div class="dashboard_content">

        <!-- START LEFT SECTION -->
        <div class="dashboard_stadistics">
          <div class="dashboard_buttonCluster">
            <button class="dashboard_buttonCluster-button dashboard_buttonCluster_buttonActive"
              id="daily-chart-button">
              <span>Vista de <br><b>hoy</b></span>
              <i class="fa-solid fa-calendar-day"></i>
            </button>

            <button class="dashboard_buttonCluster-button"
              id="weekly-chart-button">
              <span>Vista por <br><b>semana</b></span>
              <i class="fa-solid fa-calendar-week"></i>
            </button>

            <button class="dashboard_buttonCluster-button"
              id="monthly-chart-button">
              <span>Vista por <br><b>mes</b></span>
              <i class="fa-solid fa-calendar-days"></i>
            </button>

            <button class="dashboard_buttonCluster-button"
              id="yearly-chart-button">
              <span>Vista por <br><b>año</b></span>
              <i class="fa-solid fa-calendar-lines"></i>
            </button>
          </div>

          <!-- RENDER CHARTS HERE -->
          <div class="chart_container">
            <canvas id="weekly-chart" width="100%"></canvas>
          </div>
          <!-- END RENDER CHARTS -->

          <!-- RENDER DATATABLE HERE -->
          <div class="dashboard_datatable">
            <h2>Visitas recientes</h2>
            <table>
              <thead>
                <tr>
                  <th>CI</th>
                  <th>Nombre</th>
                  <th>Fecha</th>
                  <th>Hora</th>
                  <th>Estado</th>
                </tr>
              </thead>
            </table>
          </div>
          <!-- END RENDER DATATABLE -->

        </div>
        <!-- END LEFT SECTION -->

        <!-- START RIGHT SECTION -->
        <div class="dashboard_news_and_notes">
        <!-- News card -->
          <div class="news">
            <div class="cards">
              <div class="cards_container" id="cards-container"></div>
              <div class="cards_controls_container" id="cards-controls-container"></div>
            </div>

            <button class="btn btn_new_announcement margin_t_8" id="new-announcement"><i class="fa-regular fa-plus margin_r_8"></i> Nuevo anuncio</button>

          </div>
        <!-- End news card -->
          <div class="notes">
            <h1>Últimas notas</h1>
              <table class="table">
                <thead>
                  <tr>
                    <th></th>
                    <th></th>
                  </tr>
                </thead>
                <tbody id="table-body-notes">

                </tbody>
              </table>
            </div>
          </div>
        </div>
        <!-- END RIGHT SECTION -->
      </div>
    `;
        renderDailyChart();
        this.renderAnnouncements();
        const buttonCluster = document.querySelectorAll('.dashboard_buttonCluster-button');
        buttonCluster.forEach((button) => {
            button.addEventListener('click', () => {
                buttonCluster.forEach((button) => {
                    button.classList.remove('dashboard_buttonCluster_buttonActive');
                });
                button.classList.add('dashboard_buttonCluster_buttonActive');
            });
        });
        const dailyChart = document.getElementById('daily-chart-button');
        dailyChart.addEventListener('click', () => {
            renderDailyChart();
        });
        const weeklyChart = document.getElementById('weekly-chart-button');
        weeklyChart.addEventListener('click', () => {
            renderWeeklyChart();
        });
        const monthlyChart = document.getElementById('monthly-chart-button');
        monthlyChart.addEventListener('click', () => {
            renderMonthlyChart();
        });
        const yearlyChart = document.getElementById('yearly-chart-button');
        yearlyChart.addEventListener('click', () => {
            renderYearlyChart();
        });
        this.renderlastNotes();
    }
    async renderAnnouncements() {
        const newAnnouncementButton = document.getElementById('new-announcement');
        const announcements = await getEntitiesData('Announcement');
        const cardsContainer = document.getElementById('cards-container');
        const cardsControlsContainer = document.getElementById('cards-controls-container');
        let prop;
        announcements.forEach((announcement) => {
            const CARD = document.createElement('DIV');
            CARD.classList.add('card');
            CARD.innerHTML = `
        <h3 class="card_title">${announcement.title}</h3>
        <p class="card_content">${announcement.content}</p>
      `;
            cardsContainer.appendChild(CARD);
            const DOTBUTTON = document.createElement('BUTTON');
            DOTBUTTON.classList.add('card_dotbutton');
            cardsControlsContainer.appendChild(DOTBUTTON);
        });
        newAnnouncementButton?.addEventListener('click', () => {
            let sidebarRightContainer = document.getElementById('entity-editor-container');
            sidebarRightContainer.innerHTML = '';
            sidebarRightContainer.style.display = 'flex';
            sidebarRightContainer.innerHTML = `
            <div class="entity_editor" id="entity-editor">
                <div class="entity_editor_header">
                    <div class="user_info">
                    <div class="avatar"><i class="fa-solid fa-rectangle-ad"></i></div>
                    <h1 class="entity_editor_title">Nuevo <br><small>Anuncio</small></h1>
                    </div>

                    <button class="btn btn_close_editor" id="close"><i class="fa-regular fa-x"></i></button>
                </div>

                <!-- EDITOR BODY -->
                <div class="entity_editor_body">
                    <div class="material_input">
                        <input type="text" id="announcement-title" autocomplete="none">
                        <label for="announcement-title"><i class="fa-solid fa-heading"></i> Título</label>
                    </div>

                    <div class="form_input">
                        <label class="form_label" for="announcement-content">Contenido del anuncio:</label>
                        <textarea type="time" id="announcement-content" name="announcement-content" rows="10" cols="32"
                        class="input_textarea"></textarea>
                    </div>

                </div>
                <!-- END EDITOR BODY -->

                <div class="entity_editor_footer">
                    <button class="btn btn_primary btn_widder" id="post-ad">Publicar</button>
                </div>
                </div>
            `;
            inputObserver();
            this.close();
            post();
            function post() {
                const buttonPostAd = document.getElementById('post-ad');
                const announcementTitle = document.getElementById('announcement-title');
                const announcementContent = document.getElementById('announcement-content');
                buttonPostAd.addEventListener('click', () => {
                    console.log('Announcement Title: ' + announcementTitle.value);
                    console.log('Announcement Content: ' + announcementContent.value);
                });
            }
        });
        const buttons = document.querySelectorAll('.cards_controls_container button');
        buttons[0].classList.add('card_dotbutton-active');
        buttons.forEach((button) => {
            button.addEventListener('click', (e) => {
                const parent = button.parentNode;
                const grantParent = parent.parentNode;
                const container = grantParent.querySelector('.cards_container');
                const childrenList = Array.from(parent.children);
                const index = childrenList.indexOf(button);
                container.style.transform = `translatex(-${index * 100}%)`;
                buttons.forEach((button) => button.classList.remove('card_dotbutton-active'));
                button.classList.add('card_dotbutton-active');
            });
        });
    }
    async renderlastNotes() {
        async function getNotes() {
            let url = 'https://backend.netliinks.com:443/rest/entities/Note?fetchPlan=full&&limit=5&&offset=0';
            return await getData(url);
        }
        const tableBody = document.getElementById('table-body-notes');
        let _notes = await getNotes();
        for (let i = 0; i < _notes.length; i++) {
            let note = _notes[i];
            let row = document.createElement('TR');
            let noteCreationDate = note.creationDate.split('T');
            let creationDate = noteCreationDate[0];
            row.innerHTML += `
                <td>${note.content}</td>
                <td>${creationDate}</td>
            `;
            tableBody.appendChild(row);
        }
    }
    close() {
        const closeButton = document.getElementById('close');
        const editor = document.getElementById('entity-editor-container');
        closeButton.addEventListener('click', () => {
            new CloseDialog().x(editor);
        }, false);
    }
}
