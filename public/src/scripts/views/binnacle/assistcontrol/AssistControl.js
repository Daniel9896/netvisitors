//
//  AssistControl.ts
//
//  Generated by Poll Castillo on 15/03/2023.
//
import { Config } from "../../../Configs.js";
import { getEntityData, getEntitiesData } from "../../../endpoints.js";
import { CloseDialog, drawTagsIntoTables, renderRightSidebar } from "../../../tools.js";
import { UIContentLayout, UIRightSidebar } from "./Layout.js";
import { UITableSkeletonTemplate } from "./Template.js";
// Local configs
const tableRows = Config.tableRows;
let currentPage = Config.currentPage;
const pageName = 'Control de asistencias';
const GetAssistControl = async () => {
    const assistControl = await getEntitiesData('Marcation');
    return assistControl;
};
export class AssistControl {
    constructor() {
        this.dialogContainer = document.getElementById('app-dialogs');
        this.siebarDialogContainer = document.getElementById('entity-editor-container');
        this.appContainer = document.getElementById('datatable-container');
        this.render = async () => {
            let assistControlArray = await GetAssistControl();
            this.appContainer.innerHTML = '';
            this.appContainer.innerHTML = UIContentLayout;
            // Getting interface elements
            const viewTitle = document.getElementById('view-title');
            const tableBody = document.getElementById('datatable-body');
            // Changing interface element content
            viewTitle.innerText = pageName;
            tableBody.innerHTML = UITableSkeletonTemplate.repeat(tableRows);
            // Exec functions
            this.load(tableBody, currentPage, assistControlArray);
            this.searchVisit(tableBody, assistControlArray);
            // Rendering icons
        };
        this.load = (tableBody, currentPage, assistControl) => {
            tableBody.innerHTML = ''; // clean table
            // configuring max table row size
            currentPage--;
            let start = tableRows * currentPage;
            let end = start + tableRows;
            let paginatedItems = assistControl.slice(start, end);
            // Show message if page is empty
            if (assistControl.length === 0) {
                let row = document.createElement('TR');
                row.innerHTML = `
            <td>No existen datos<td>
            <td></td>
            <td></td>
            `;
                tableBody.appendChild(row);
            }
            else {
                for (let i = 0; i < paginatedItems.length; i++) {
                    let assistControl = paginatedItems[i]; // getting visit items
                    let row = document.createElement('TR');
                    row.innerHTML += `
                    <td style="white-space: nowrap">${assistControl.user.firstName} ${assistControl.user.lastName} ${assistControl.user.secondLastName}</td>
                    <td>${assistControl.dni}</td>
                    <td id="table-date">${assistControl.ingressTime}</td>
                    <td id="table-date">${assistControl.egressTime}</td>
                    <td class="tag"><span>${assistControl.marcationState.name}</span></td>

                    <td>
                        <button class="button" id="entity-details" data-entityId="${assistControl.id}">
                            <i class="table_icon fa-regular fa-magnifying-glass"></i>
                        </button>
                    </td>
                `;
                    tableBody.appendChild(row);
                    drawTagsIntoTables();
                }
                this.previewAssist();
                this.fixCreatedDate();
            }
        };
        this.searchVisit = async (tableBody, visits) => {
            const search = document.getElementById('search');
            await search.addEventListener('keyup', () => {
                const arrayVisits = visits.filter((visit) => `${visit.dni}${visit.firstName}${visit.firstLastName}${visit.secondLastName}${visit.createdDate}${visit.visitState.name}${visit.user.userType}${visit.creationTime}`
                    .toLowerCase()
                    .includes(search.value.toLowerCase()));
                let filteredVisit = arrayVisits.length;
                let result = arrayVisits;
                if (filteredVisit >= Config.tableRows)
                    filteredVisit = Config.tableRows;
                this.load(tableBody, currentPage, result);
            });
        };
        this.previewAssist = async () => {
            const openButtons = document.querySelectorAll('#entity-details');
            openButtons.forEach((openButton) => {
                const entityId = openButton.dataset.entityid;
                openButton.addEventListener('click', () => {
                    renderInterface(entityId);
                });
            });
            const renderInterface = async (entity) => {
                let entityData = await getEntityData('Marcation', entity);
                console.log(entityData);
                renderRightSidebar(UIRightSidebar);
                const marcationName = document.getElementById('entity-firstname');
                marcationName.value = `${entityData.user.firstName} ${entityData.user.lastName} ${entityData.user.secondLastName}`;
                const userDni = document.getElementById('entity-dni');
                if (await !entityData.user.dni) {
                    let dniParent = userDni.parentNode;
                    dniParent.style.display = "none";
                }
                else {
                    userDni.value = entityData.user.dni;
                }
                const userType = document.getElementById('entity-type');
                let userTypeParent = userType.parentNode;
                if (await !entityData.user.userType)
                    userTypeParent.style.display = "none";
                else if (entityData.user.userType == 'CUSTOMER')
                    userType.value = 'Cliente';
                else if (entityData.user.userType == 'GUARD')
                    userType.value = 'Guardia';
                const marcationStatus = document.getElementById('marcation-status');
                marcationStatus.innerText = entityData.marcationState.name;
                drawTagsIntoTables();
                // const visitAutorizedBy: InterfaceElement = document.getElementById('visit-authorizedby')
                // visitAutorizedBy.value = entityData.authorizer
                // const visitStatus: InterfaceElement = document.getElementById('visit-status')
                // visitStatus.innerText = entityData.visitState.name
                // const visitCitadel: InterfaceElement = document.getElementById('visit-citadel')
                // visitCitadel.value = entityData.citadel.description
                // const visitCitadelID: InterfaceElement = document.getElementById('visit-citadelid')
                // visitCitadelID.value = entityData.citadel.name
                // const visitDepartment: InterfaceElement = document.getElementById('visit-department')
                // visitDepartment.value = entityData.department.name
                // console.log(entityData.citadel.name)
                this.closeRightSidebar();
                drawTagsIntoTables();
            };
        };
        this.closeRightSidebar = () => {
            const closeButton = document.getElementById('close');
            const editor = document.getElementById('entity-editor-container');
            closeButton.addEventListener('click', () => {
                new CloseDialog().x(editor);
            });
        };
        this.fixCreatedDate = () => {
            const tableDate = document.querySelectorAll('#table-date');
            tableDate.forEach((date) => {
                const separateDateAndTime = date.innerText.split('T');
                date.innerText = separateDateAndTime[0];
            });
        };
    }
}
